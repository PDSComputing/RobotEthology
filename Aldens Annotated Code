// Created Nick Livingston 2017
// Edited by Alden Rosakranse 2019
// PDS version without any use of Servo shields.
// Meant for use with Uno, or with TinyDuino
#include "sensors.h"
#include <Servo.h>


Servo left_servo;
Servo right_servo;  // create servo object to control a servo
// twelve servo objects can be created on most boards


//*************************************************** Function Declarations ***********************************************************//
//Behavior Primitive Functions
//These are the options for the robots functions
int check_escape_conditions();
int check_escape_back_conditions();
int check_seek_light_conditions();
int check_seek_dark_conditions();
int check_avoid_conditions();
int check_approach_conditions();
void escape();
void escape_back();
void seek_light();
void seek_dark();
void avoid();
void approach();
void straight_cruise();
void motor_stop();
//Motor Control Function
//Allows for drive commands to be given in this manner
void drive(float left, float right, float delay_seconds);

//*************************************************** Global Constant Declarations ****************************************************//
const int FRONT_BUMP = 15;
const int BACK_BUMP = 14;
const int LEFT_PHOTO = 1;
const int RIGHT_PHOTO = 0;
const int LEFT_IR = 3;//Cannot use ports 4, or 5 because they are dedicated to SDA and SCL, which is used for stack communications.
const int RIGHT_IR = 2;
const int LEFT_MOTOR = 6;
const int RIGHT_MOTOR = 9;
const int SERVO_MID = 90;
const int SERVO_RANGE = 90;


//*************************************************** Function Definitions ****************************************************//
void setup(){
  Serial.begin(9600);
  Serial.println("8 channel Servo test!");

  left_servo.attach(LEFT_MOTOR);
  right_servo.attach(RIGHT_MOTOR);  // attaches the servo on pin RIGHT_MOTOR to the servo object

  pinMode(FRONT_BUMP, INPUT_PULLUP);
  pinMode(BACK_BUMP, INPUT_PULLUP);
  pinMode(LEFT_PHOTO, INPUT);
  pinMode(RIGHT_PHOTO, INPUT);
  pinMode(LEFT_IR, INPUT);
  pinMode(RIGHT_IR, INPUT);
 
  //digitalWrite(BACK_BUMP, LOW);
}
/******************************************************/
// Seek Dark Function
void loop() 
{
  read_analog();
  if(check_seek_dark_conditions()){
seek_dark();
}
else if(check_avoid_conditions()){
avoid();
}
else{straight_cruise();}

}
/******************************************************/
void read_analog(){
  left_photo_value    = 0;
  right_photo_value   = 0;
  left_ir_value       = 0;
  right_ir_value      = 0;
  for(int i = 0; i < 10; i++){
    left_photo_value    += (analogRead(LEFT_PHOTO));
    right_photo_value   += (analogRead(RIGHT_PHOTO));
    left_ir_value       += analogRead(LEFT_IR);
    right_ir_value      += analogRead(RIGHT_IR);
  }
  left_photo_value  /= 10;
  right_photo_value /= 10;
  //right_photo_value -= photo_offset;
  left_ir_value     /= 10;
  right_ir_value    /= 10;
}
/******************************************************/
// Escape Function
int check_escape_conditions(){
  
  front_bump_value = analogRead(FRONT_BUMP);
  Serial.print("front bump: ");Serial.println(front_bump_value);
  if(front_bump_value >= bump_threshold && front_bump_value <= bump_max){
    return true;
  }else{
    return false;
  }
}

/******************************************************/
// Escape Back Function
int check_escape_back_conditions(){
  int bump_threshold = 250;
  int bump_max = 400;
  
  int back_bump_value = digitalRead(BACK_BUMP);//analogRead(BACK_BUMP);
  Serial.print("back bump: ");Serial.println(back_bump_value);
  if (back_bump_value == HIGH){
    return true;
  }/*
  if(back_bump_value < bump_threshold){
    return true;
  }
  else if(back_bump_value >= bump_threshold && back_bump_value <= bump_max)
  {
    return true;
  }*/else{
    return false;
  }
}

/******************************************************/
// Seek Light Function
int check_seek_light_conditions(){
 
  
  //printf("left_photo_raw = %d\nright_photo_raw = %d\n", left_photo_raw, right_photo_raw);
  Serial.print("check_seek_light_conditions().... ");
  Serial.print(left_photo_value);
  Serial.print(" : ");
  Serial.println(right_photo_value);
 
  
  if(left_photo_value > photo_max){
    left_photo_value = photo_max;
  }
  if(right_photo_value > photo_max){
    right_photo_value = photo_max;
  }
  
  photo_difference  = left_photo_value - right_photo_value;

  //printf("left_photo = %f\nright_photo = %f\n", left_photo_value, right_photo_value);
  //printf("photo_difference = %f\n", photo_difference);
  Serial.print("photo_difference: ");
  Serial.println(photo_difference);
  if(fabs(photo_difference) > photo_threshold){
    return true;
  }
  else{
    return false;
  }
}

/******************************************************/
// Seek Dark Conditions
int check_seek_dark_conditions(){
  int left_photo_value;
  int right_photo_value;
  int photo_difference;
  int photo_threshold = 10;
  
  left_photo_value = analogRead(LEFT_PHOTO);
  right_photo_value = analogRead(RIGHT_PHOTO);
  photo_difference = left_photo_value - right_photo_value;

  if(abs(photo_difference) > photo_threshold){
    return true;
  }
  else{
    return false;
  }
}

/******************************************************/
// Avoid Conditions
int check_avoid_conditions(){
  
  Serial.print("check_avoid_conditions().... ");
  Serial.print(left_ir_value);
  Serial.print(" : ");
  Serial.println(right_ir_value);
  if(left_ir_value >= 500 || right_ir_value >= 500){
    return true;
  }else{
    return false;
  }
}

/******************************************************/
// Approach Conditions
int check_approach_conditions(){
  int left_ir_value;
  int right_ir_value;
  int approach_threshold = 300;
  
  left_ir_value = analogRead(LEFT_IR);
  right_ir_value = analogRead(RIGHT_IR);
  
  if(left_ir_value > approach_threshold || right_ir_value > approach_threshold){
    return true;
  }else{
    return false;
  }
}

/******************************************************/
// Escape Conditions
void escape(){
 
  Serial.println("EscapeFrontBump()");
  //Left is 0 to mid range
  if(front_bump_value >= bump_threshold && front_bump_value <= bump_max/2){
    drive(-1, -0.5, 1.00);
    //printf("drive(-0.25, -0.75, 1.5);\n");
  }
  //Right is mid range to max
  else if(front_bump_value > bump_max/2){
    drive(-0.5, -1, 1.00);
    //printf("drive(-0.75, -0.25, 1.5);\n");
  }

}

/******************************************************/
// Escape Back Conditions
void escape_back(){
  int bump_threshold = 250;
  int bump_max = 400;
  
  int back_bump_value = digitalRead(BACK_BUMP);//analogRead(BACK_BUMP);

  if (back_bump_value == HIGH){
    drive(0.25, -0.75, 0.30);
  }/*
  if(back_bump_value < bump_threshold){
    drive(0.25, -0.75, 0.30);
  }
  else if(back_bump_value >= bump_threshold && back_bump_value <= bump_max)
  {
    drive(-0.75, 0.25, 0.30);
  }*/
}

/******************************************************/
// Seek Light Conditions
void seek_light(){
  float left_servo;
  float right_servo;
  Serial.println("seek_light");
  /*if(fabs(photo_difference) > photo_threshold){
    right_servo = photo_difference/photo_max;//(float)(photo_max - right_photo_value)/(float)photo_max;
    left_servo  = -right_servo;//(float)(photo_max - left_photo_value)/(float)photo_max;
  }*/
  if(photo_difference > 0){//Left brighter, turn left
    left_servo = -0.25;
    right_servo = 0.25;
  }else{
    left_servo = 0.25;
    right_servo = -0.25;
  }

  //printf("left_servo = %f, right_servo = %f\n", left_servo, right_servo);
  drive(left_servo, right_servo, 0.20);
}

/******************************************************/
// Seek Dark Conditions
void seek_dark(){
  int left_photo_value;
  int right_photo_value;
  int photo_difference;
  float photo_ratio;
  float left_servo;
  float right_servo;
  int photo_threshold = 0;
  
  left_photo_value  = analogRead(LEFT_PHOTO);
  right_photo_value = analogRead(RIGHT_PHOTO);
  printf("left_photo = %d, right_photo = %d\n", left_photo_value, right_photo_value);
  photo_difference  = left_photo_value - right_photo_value;
  photo_ratio       = (float)photo_difference/1023.0;

  if(abs(photo_ratio) > photo_threshold){
    right_servo = right_photo_value/1023.0;
    left_servo  = left_photo_value/1023.0;
  }

  printf("left_servo = %f, right_servo = %f\n", left_servo, right_servo);
  drive(left_servo, right_servo, 0.25);
  
}

/******************************************************/
// Avoid in simple terms
void avoid(){
  if(left_ir_value >= 500){
    drive(0.75, -0.75, 0.20);
  }
  
  else if(right_ir_value >= 500){
    drive(-0.75, 0.5, 0.20);
  }
}

/******************************************************/
// Approach Conditions
void approach(){
  int left_ir_value;
  int right_ir_value;
  int approach_threshold = 300;
  
  left_ir_value = analogRead(LEFT_IR);
  right_ir_value = analogRead(RIGHT_IR);
  
  printf("left_ir = %d, right_ir = %d\n", left_ir_value, right_ir_value);
  
  if(left_ir_value > approach_threshold){
    drive(0.25, 0.75, 0.5);
  }
  
  else if(right_ir_value > approach_threshold){
    drive(0.75, 0.25, 0.5);
  }
}
/******************************************************/
// Straight Cruise
void straight_cruise(){
  drive(0.50, 0.50, 0.5);
}
/******************************************************/
// Arc Cruise
void arc_cruise(){
  drive(0.75, 0.5, 0.5);
}
/******************************************************/
// A pause of sorts, stopping the motor for .25 seconds
void motor_stop(){
  drive(0.0, 0.0, 0.25);
}
/******************************************************/
// Drive Conditions
void drive(float left, float right, float delay_seconds){
  
  int left_speed       = SERVO_MID + (SERVO_RANGE * left);
  int right_speed      = SERVO_MID - (SERVO_RANGE * right);
  delay_seconds *= 1000;
  /*Serial.print(left_speed);
  Serial.print(" : ");
  Serial.println(right_speed);
 */
  left_servo.write(left_speed);
  right_servo.write(right_speed);
  delay(delay_seconds);

}
